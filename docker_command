#########################Basic#############################
###########################################################
1. install a new container with nginx image on fg
docker container run --publish 8888:80 nginx   #[localhost:80]  ==> browser access: localhost:8888

2. install a new container with nginx image on bg
docker container run --publish 8888:80 --detach nginx # --detach run in bg

3.List container in server
docker container ls -a  #-a: all

4. Stop container
docker container stop <id>

5.
 docker container run --publish 8888:80 --detach --name test_tag_name nginx  #name tag

6. Monitor logs of a container

docker container logs test_tag_name  #   'test_tag_name' of name container

7. Monitor top process of a container

docker container top test_tag_name

8. Remove one or multi container


docker container rm <ID container 1> <....>


docker container rm -f <ID container 1> <....> # in cases, containers are running

9.

docker container run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T 
#Option 
#nginx:1.11 is version of nginx
#-T : change CMD run on start
#-d: run in background
#--publish or -p


10: docker ps vs docker container ls -a

docker container ls # show container is running
docker container ls -a #show all container



11.

docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_PASSWORD=yes mysql
#-e: edit parameter of ....

12. show data about the container
(volumes,config,port,etc)

docker container inspect <name of container>

13. show live performance data all containers
docker container stats -a

14. Docker Network

docker network ls
docker network inspect <argument>

docker network create <name of network> --driver <overlay,host,null,bridge>
docker network create <name of network> #bridge mode default
docker network connect <ID of network> <ID of name container>

#assign a network to new container  #bridge mode
docker container run -d -p 3306:3306 --name db --network <name of created network> mysql

15. Ping host

docker container exec -it <container1> ping <container2>

16. Docker Image

17. Data volume

docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/vaf/lib/mysql mysql
docker volume ls
docker volume inspect <volume name>

18.

#########################Advance###########################
###########################################################

1. Pulling image and run container
=> docker image pull <name of service>
=> docker image ls
#create a container using pulled image
=> docker container run -id --name demo alpine ash // image=alpine, command=ash
2. Starting a container 
=> docker container run -d -t -i ubuntu /bin/bash

3. Looking at the container logs
=> docker container run -d ubuntu /bin/bash -c "while [ true ]; do date; sleep 1; done"

4. Stopping/Start/Restart a container
=> docker stop $ID/$name
5.
=>
6.
=>
7.
=>
8.
=>
9.
=>

10. Reading a container's metadata: While doing debugging, automation, and so on, we will need the container's configuration
details. Docker provides the container inspect command to get those easily.

=> ID=$(docker container run -d -i ubuntu /bin/bash)
=> docker container inspect $ID


* Filter IP of container: 
=> docker container inspect --format='{{.NetworkSettings.IPAdress}}' $ID


11.Add labeling and filtering containers
#show all image list
=> docker image ls
#add labels
=> docker container run --label com.example.container=docker-cookbook label-demo date
#run docker container list again

=> docker container ls -a
=> docker container ls -a --filter label=com.example.image=docker-cookbook

12. Find Zombies process: Docker is designed to run one process per container and usually the process 
running inside the containers doesn't create child processes. However, if the process inside
the container creates child processes, then an init system is needed to reap zombie processes
=> docker container run --rm alpine pstree -p
=> docker container run --rm alpine sh -c "pstree -p"
=> docker container run --rm --init alpine pstree -p
=> docker container run --rm --init alpine sh -c "pstree -p"
